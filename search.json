[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "FastRequest",
    "section": "",
    "text": "pip install FastRequest",
    "crumbs": [
      "FastRequest"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "FastRequest",
    "section": "",
    "text": "pip install FastRequest",
    "crumbs": [
      "FastRequest"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "FastRequest",
    "section": "How to use",
    "text": "How to use\nThe dynamic data polutaion is achived by using anonymous functions with formatted string to fetch Env varibles like get_env('key').\n\nfrom FastRequest.ReqRespBunch import *\nfrom FastRequest.RestReqFactory import *\nfrom FastRequest.Runner import *\n\n\nreq1 = RestReqFactory(\n    method=\"GET\",\n    url_provider= lambda: f\"{get_env('url1')}/get\",\n    params_provider= lambda : {\n        \"foo1\": 'foo1',\n        \"foo2\": \"foo2\",\n    }\n)\nreq2 = RestReqFactory(\n    method=\"GET\",\n    url_provider= lambda : f\"{get_env('url2')}/api/users/2\",\n)\nreqs = ReqRespBunch([req1, req2])\n\n\nset_env('url1', 'https://postman-echo.com')\nset_env('url2', 'https://reqres.in')\n\n\nrunner = Runner()\nrunner.run(reqs)",
    "crumbs": [
      "FastRequest"
    ]
  },
  {
    "objectID": "index.html#design",
    "href": "index.html#design",
    "title": "FastRequest",
    "section": "Design",
    "text": "Design\nIt implows callback sytem both before and after each Rest Request. Which gives the chanse to weive together the response with the next request and any required validation. Please consider the below digram.\n\nFlow Chart",
    "crumbs": [
      "FastRequest"
    ]
  },
  {
    "objectID": "runner.html",
    "href": "runner.html",
    "title": "Runner",
    "section": "",
    "text": "Callback\n\nBasic callbacks for Runner. Callbacks can occur at any of these times before_run, before_request, after_request, after_run. Each order of the new derived callback should be greated that 0.\nEach class have the access to epoch, resp the response returned the respinse, reqs_bunch the req list, resps_bunch response list, kwargs_bunch kwargs dictionary.\nit also the access to both set_kwargs and set_resp\n\n\n\nRunner\nInit the runners with list of callbacks.\n\nsource\n\n\nRunner\n\n Runner (cb_funcs=None)\n\nInitialize self. See help(type(self)) for accurate signature.\nBellow are two callbacks we implemented with its functionality  1. CookieCallback is used for chaining the cookies from a rasponse to setnext request’s kwargs 1. ResponseStoreCallback for storing each request’s response\n\n# Create the RestReqFactory instance\nreq1 = RestReqFactory(\n    method=\"GET\",\n    url_provider= lambda: f\"{get_env('url1')}/get\",\n    params_provider= lambda : {\n        \"foo1\": f\"{get_env('foo1')}\",\n        \"foo2\": f\"{get_env('foo2')}\",\n    }\n)\nreq2 = RestReqFactory(\n    method=\"GET\",\n    url_provider= lambda : f\"{get_env('url2')}/api/users/2\",\n)\nreqs = ReqRespBunch([req1, req2])\nlen(reqs)\n\n2\n\n\n\nset_env('foo1', 'foo1')\nset_env('foo2', 'foo2')\nset_env('url1', 'https://postman-echo.com')\nset_env('url2', 'https://reqres.in')\n\n\nrunner = Runner()\nrunner.run(reqs, debug=True)\n\n\n\n\n=================================== epoch=1 ===================================\nrequest:\n--------\n{\n    \"method\": \"GET\",\n    \"url\": \"https://postman-echo.com/get\",\n    \"headers\": \"None\",\n    \"params\": {\n        \"foo1\": \"foo1\",\n        \"foo2\": \"foo2\"\n    },\n    \"body\": \"None\",\n    \"kwargs\": \"None\"\n}\nkwargs:\n-------\n{}\nexecution time: 875.37ms\nresponse:\n---------\n{\n    \"url\": \"https://postman-echo.com/get?foo1=foo1&foo2=foo2\",\n    \"status\": 200,\n    \"headers\": {\n        \"Date\": \"Mon, 10 Jun 2024 14:32:22 GMT\",\n        \"Content-Type\": \"application/json; charset=utf-8\",\n        \"Content-Length\": \"512\",\n        \"Connection\": \"close\",\n        \"Server\": \"nginx/1.25.3\",\n        \"ETag\": \"W/\\\"200-u8K/5We2ycAZZmfyGOJShXcIc88\\\"\",\n        \"set-cookie\": \"sails.sid=s%3AbccKPy3Ni4wAGdPwtqitIniFOpF-JHp6.eRZq87hnH6nr%2FgaN%2BR6ug%2BX5sx6NpLtOEQj%2B%2BiZamIE; Path=/; HttpOnly\"\n    },\n    \"cookies\": {\n        \"sails.sid\": \"s%3AbccKPy3Ni4wAGdPwtqitIniFOpF-JHp6.eRZq87hnH6nr%2FgaN%2BR6ug%2BX5sx6NpLtOEQj%2B%2BiZamIE\"\n    },\n    \"elapsed\": \"0:00:00.869218\",\n    \"text\": \"{\\n  \\\"args\\\": {\\n    \\\"foo1\\\": \\\"foo1\\\",\\n    \\\"foo2\\\": \\\"foo2\\\"\\n  },\\n  \\\"headers\\\": {\\n    \\\"host\\\": \\\"postman-echo.com\\\",\\n    \\\"x-forwarded-proto\\\": \\\"http\\\",\\n    \\\"x-request-start\\\": \\\"t=1718029942.757\\\",\\n    \\\"connection\\\": \\\"close\\\",\\n    \\\"content-length\\\": \\\"4\\\",\\n    \\\"x-forwarded-port\\\": \\\"443\\\",\\n    \\\"x-amzn-trace-id\\\": \\\"Root=1-66670e76-2660a8501e67c6470d137f23\\\",\\n    \\\"user-agent\\\": \\\"python-requests/2.31.0\\\",\\n    \\\"accept-encoding\\\": \\\"gzip, deflate, br, zstd\\\",\\n    \\\"accept\\\": \\\"*/*\\\"\\n  },\\n  \\\"url\\\": \\\"http://postman-echo.com/get?foo1=foo1&foo2=foo2\\\"\\n}\",\n    \"json\": {\n        \"args\": {\n            \"foo1\": \"foo1\",\n            \"foo2\": \"foo2\"\n        },\n        \"headers\": {\n            \"host\": \"postman-echo.com\",\n            \"x-forwarded-proto\": \"http\",\n            \"x-request-start\": \"t=1718029942.757\",\n            \"connection\": \"close\",\n            \"content-length\": \"4\",\n            \"x-forwarded-port\": \"443\",\n            \"x-amzn-trace-id\": \"Root=1-66670e76-2660a8501e67c6470d137f23\",\n            \"user-agent\": \"python-requests/2.31.0\",\n            \"accept-encoding\": \"gzip, deflate, br, zstd\",\n            \"accept\": \"*/*\"\n        },\n        \"url\": \"http://postman-echo.com/get?foo1=foo1&foo2=foo2\"\n    }\n}\n=================================== epoch=2 ===================================\nrequest:\n--------\n{\n    \"method\": \"GET\",\n    \"url\": \"https://reqres.in/api/users/2\",\n    \"headers\": \"None\",\n    \"params\": \"None\",\n    \"body\": \"None\",\n    \"kwargs\": {\n        \"cookies\": [\n            {\n                \"name\": \"sails.sid\",\n                \"value\": \"s%3AbccKPy3Ni4wAGdPwtqitIniFOpF-JHp6.eRZq87hnH6nr%2FgaN%2BR6ug%2BX5sx6NpLtOEQj%2B%2BiZamIE\",\n                \"domain\": \"postman-echo.com\",\n                \"path\": \"/\"\n            }\n        ]\n    }\n}\nkwargs:\n-------\n{'cookies': &lt;RequestsCookieJar[Cookie(version=0, name='sails.sid', value='s%3AbccKPy3Ni4wAGdPwtqitIniFOpF-JHp6.eRZq87hnH6nr%2FgaN%2BR6ug%2BX5sx6NpLtOEQj%2B%2BiZamIE', port=None, port_specified=False, domain='postman-echo.com', domain_specified=False, domain_initial_dot=False, path='/', path_specified=True, secure=False, expires=None, discard=True, comment=None, comment_url=None, rest={'HttpOnly': None}, rfc2109=False)]&gt;}\nexecution time: 160.78ms\nresponse:\n---------\n{\n    \"url\": \"https://reqres.in/api/users/2\",\n    \"status\": 200,\n    \"headers\": {\n        \"Date\": \"Mon, 10 Jun 2024 14:32:23 GMT\",\n        \"Content-Type\": \"application/json; charset=utf-8\",\n        \"Transfer-Encoding\": \"chunked\",\n        \"Connection\": \"keep-alive\",\n        \"Report-To\": \"{\\\"group\\\":\\\"heroku-nel\\\",\\\"max_age\\\":3600,\\\"endpoints\\\":[{\\\"url\\\":\\\"https://nel.heroku.com/reports?ts=1718010669&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=jI4DN4S34hLQCMFUREXx0gJJEl%2BEwua9NFbOTVfQ8pg%3D\\\"}]}\",\n        \"Reporting-Endpoints\": \"heroku-nel=https://nel.heroku.com/reports?ts=1718010669&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=jI4DN4S34hLQCMFUREXx0gJJEl%2BEwua9NFbOTVfQ8pg%3D\",\n        \"Nel\": \"{\\\"report_to\\\":\\\"heroku-nel\\\",\\\"max_age\\\":3600,\\\"success_fraction\\\":0.005,\\\"failure_fraction\\\":0.05,\\\"response_headers\\\":[\\\"Via\\\"]}\",\n        \"X-Powered-By\": \"Express\",\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Etag\": \"W/\\\"118-pbdwwFo9SKNhD3Lx5iHJyngpq00\\\"\",\n        \"Via\": \"1.1 vegur\",\n        \"Cache-Control\": \"max-age=14400\",\n        \"CF-Cache-Status\": \"HIT\",\n        \"Age\": \"4827\",\n        \"Vary\": \"Accept-Encoding\",\n        \"Server\": \"cloudflare\",\n        \"CF-RAY\": \"891a1207cd5480c2-BOM\",\n        \"Content-Encoding\": \"br\"\n    },\n    \"cookies\": {},\n    \"elapsed\": \"0:00:00.159517\",\n    \"text\": \"{\\\"data\\\":{\\\"id\\\":2,\\\"email\\\":\\\"janet.weaver@reqres.in\\\",\\\"first_name\\\":\\\"Janet\\\",\\\"last_name\\\":\\\"Weaver\\\",\\\"avatar\\\":\\\"https://reqres.in/img/faces/2-image.jpg\\\"},\\\"support\\\":{\\\"url\\\":\\\"https://reqres.in/#support-heading\\\",\\\"text\\\":\\\"To keep ReqRes free, contributions towards server costs are appreciated!\\\"}}\",\n    \"json\": {\n        \"data\": {\n            \"id\": 2,\n            \"email\": \"janet.weaver@reqres.in\",\n            \"first_name\": \"Janet\",\n            \"last_name\": \"Weaver\",\n            \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\n        },\n        \"support\": {\n            \"url\": \"https://reqres.in/#support-heading\",\n            \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n        }\n    }\n}",
    "crumbs": [
      "Runner"
    ]
  },
  {
    "objectID": "restreqfactory.html",
    "href": "restreqfactory.html",
    "title": "RestReqFactory",
    "section": "",
    "text": "source\n\n\n\n get_env (x:str)\n\n\n\n\n\nType\nDetails\n\n\n\n\nx\nstr\nkey to filter\n\n\n\n\nassert get_env('x') == ''\n\n\nsource\n\n\n\n\n set_env (key:str, val:str)\n\n\n\n\n\nType\nDetails\n\n\n\n\nkey\nstr\nkey to map variable\n\n\nval\nstr\nvalue of the key\n\n\n\n\nset_env('x', 3)\nassert get_env('x') == 3",
    "crumbs": [
      "RestReqFactory"
    ]
  },
  {
    "objectID": "restreqfactory.html#env-map-to-handle-env-variables",
    "href": "restreqfactory.html#env-map-to-handle-env-variables",
    "title": "RestReqFactory",
    "section": "",
    "text": "source\n\n\n\n get_env (x:str)\n\n\n\n\n\nType\nDetails\n\n\n\n\nx\nstr\nkey to filter\n\n\n\n\nassert get_env('x') == ''\n\n\nsource\n\n\n\n\n set_env (key:str, val:str)\n\n\n\n\n\nType\nDetails\n\n\n\n\nkey\nstr\nkey to map variable\n\n\nval\nstr\nvalue of the key\n\n\n\n\nset_env('x', 3)\nassert get_env('x') == 3",
    "crumbs": [
      "RestReqFactory"
    ]
  },
  {
    "objectID": "restreqfactory.html#restreq",
    "href": "restreqfactory.html#restreq",
    "title": "RestReqFactory",
    "section": "RestReq",
    "text": "RestReq\nBase class to hold attributes of the rest request.\n\nsource\n\nRestReq\n\n RestReq (method:str, url:str, headers:Optional[dict]=None,\n          params:Optional[dict]=None, body:Optional[dict]=None,\n          kwargs:Optional[dict]=None)\n\nRest request building method\n\nreq = RestReq(\n    method=\"POST\",\n    url='https://httpbin.org/post',\n    headers={\n    \"accept\": \"application/json\",\n    },\n)\n\n\n\nTo extract curl repr\n\nreq.curl\n\n\"curl -X POST 'https://httpbin.org/post' -H 'accept: application/json'\"\n\n\n\n\nTo invoke the rest call\n\nresp = req()\ntype(resp)\n\nrequests.models.Response",
    "crumbs": [
      "RestReqFactory"
    ]
  },
  {
    "objectID": "restreqfactory.html#restreqfactory",
    "href": "restreqfactory.html#restreqfactory",
    "title": "RestReqFactory",
    "section": "RestReqFactory",
    "text": "RestReqFactory\nClass to bind the lambda function to create RestReq object`\n\nsource\n\nRestReqFactory\n\n RestReqFactory (method:str, url_provider:&lt;function &lt;lambda&gt;&gt;,\n                 headers_provider=&lt;function &lt;lambda&gt;&gt;,\n                 params_provider=&lt;function &lt;lambda&gt;&gt;,\n                 body_provider=&lt;function &lt;lambda&gt;&gt;)\n\nClass to bind the lambda function to create RestReq object\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmethod\nstr\n\nrepresents the request method\n\n\nurl_provider\n\n\nfunction returning url\n\n\nheaders_provider\nfunction\n\nfunction returning headers\n\n\nparams_provider\nfunction\n\nfunction returning params\n\n\nbody_provider\nfunction\n\nfunction returning params\n\n\n\n\n\nBuild basic RestReqFactory object\n\nurl = lambda: f\"{get_env('url')}/post\"\n\nhead = lambda : {\n    \"accept\": f\"{get_env('accept')}\",\n}\n\n# Create the RestReqFactory instance\nreq = RestReqFactory(\n    method=\"POST\",\n    url_provider=url,\n    headers_provider=head,\n)\n\n\nassert req().curl == \"\"\"curl -X POST '/post' -H 'accept: '\"\"\"\n\n\n\nleveraging Dynammic nature of ENV\n\nset_env('url', 'https://httpbin.org')\nset_env('accept', 'application/json')\n\n\nassert req().curl == \"\"\"curl -X POST 'https://httpbin.org/post' -H 'accept: application/json'\"\"\"\n\n\nresp = req()()\nassert resp.status_code  == 200\n\n\nreq()\n\n{\n    \"method\": \"POST\",\n    \"url\": \"https://httpbin.org/post\",\n    \"headers\": {\n        \"accept\": \"application/json\"\n    },\n    \"params\": \"None\",\n    \"body\": \"None\",\n    \"kwargs\": \"None\"\n}\n\n\n\n\nCookies testing\n\nurl = lambda: f\"{get_env('postman-url')}/get\"\n\nparams = lambda : {\n    \"foo1\": f\"{get_env('foo1')}\",\n    \"foo2\": f\"{get_env('foo2')}\",\n}\n\n# Create the RestReqFactory instance\nreq = RestReqFactory(\n    method=\"GET\",\n    url_provider=url,\n    params_provider=params,\n)\n\n\nset_env('foo1', 'foo1')\nset_env('foo2', 'foo2')\nset_env('postman-url', 'https://postman-echo.com')\n\nSetting up the kwargs field for the req object\n\nres = req()()\nassert res.status_code == 200\nreq.set_req_kwargs({'cookies' : res.cookies})\n\ncheck __str__ and __repr__\n\nreq()\n\n{\n    \"method\": \"GET\",\n    \"url\": \"https://postman-echo.com/get\",\n    \"headers\": \"None\",\n    \"params\": {\n        \"foo1\": \"foo1\",\n        \"foo2\": \"foo2\"\n    },\n    \"body\": \"None\",\n    \"kwargs\": {\n        \"cookies\": [\n            {\n                \"name\": \"sails.sid\",\n                \"value\": \"s%3Af2Ma6_qtUOO6o8rLJuS0_oGC3nf42AGn.4f5n7pa3spk6owtt0P1lt4lsELJVx%2FTZUwJ7w97sb6Y\",\n                \"domain\": \"postman-echo.com\",\n                \"path\": \"/\"\n            }\n        ]\n    }\n}",
    "crumbs": [
      "RestReqFactory"
    ]
  },
  {
    "objectID": "reqrespbunch.html",
    "href": "reqrespbunch.html",
    "title": "ReqRespBunch",
    "section": "",
    "text": "source\n\nReqRespBunch\n\n ReqRespBunch (reqs_lis:List[ForwardRef('FastRequest.RestReqFactory.RestRe\n               qFactory')]=None)\n\ngiven reqs_lis of type RestReqFactory, itcreates response and kwargs for each element of list\nprovides factorey method for getter as well as setter forthe respnse and kwargs set for each request\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nreqs_lis\nList\nNone\nlist of RestReqFactory\n\n\n\n\n# Create the RestReqFactory instance\nreq1 = RestReqFactory(\n    method=\"GET\",\n    url_provider= lambda: f\"{get_env('url1')}/get\",\n    params_provider= lambda : {\n        \"foo1\": f\"{get_env('foo1')}\",\n        \"foo2\": f\"{get_env('foo2')}\",\n    }\n)\nreq2 = RestReqFactory(\n    method=\"GET\",\n    url_provider= lambda : f\"{get_env('url2')}/api/users/2\",\n)\nreqs = ReqRespBunch([req1, req2])\nlen(reqs)\n\n2\n\n\n\nreq1()\n\n{\n    \"method\": \"GET\",\n    \"url\": \"/get\",\n    \"headers\": \"None\",\n    \"params\": {\n        \"foo1\": \"\",\n        \"foo2\": \"\"\n    },\n    \"body\": \"None\",\n    \"kwargs\": \"None\"\n}\n\n\n\nset_env('foo1', 'foo1')\nset_env('foo2', 'foo2')\nset_env('url1', 'https://postman-echo.com')\nset_env('url2', 'https://reqres.in')\n\n\n\n\nResponse.__str__\n\n Response.__str__ ()\n\nmonkey patch the str of the repsone object\n\n\n\nResponse.__repr__\n\n Response.__repr__ ()\n\nmonkey patch the repr of the repsone object\n\nresp = req1()()\ntype(resp)\n\nrequests.models.Response\n\n\n\nreqs.set_resp(0, req1()())\nreqs.set_resp(1, req2()())\n\n\n\nPrinting requset and response in a pair in json format\n\nreqs.print_req_resp\n\n[{'request': {\n      \"method\": \"GET\",\n      \"url\": \"https://postman-echo.com/get\",\n      \"headers\": \"None\",\n      \"params\": {\n          \"foo1\": \"foo1\",\n          \"foo2\": \"foo2\"\n      },\n      \"body\": \"None\",\n      \"kwargs\": \"None\"\n  },\n  'response': {\n      \"url\": \"https://postman-echo.com/get?foo1=foo1&foo2=foo2\",\n      \"status\": 200,\n      \"headers\": {\n          \"Date\": \"Mon, 10 Jun 2024 14:31:51 GMT\",\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          \"Content-Length\": \"512\",\n          \"Connection\": \"close\",\n          \"Server\": \"nginx/1.25.3\",\n          \"ETag\": \"W/\\\"200-3Jb3WQoBKDrr9SPJsIdfXrK4rlY\\\"\",\n          \"set-cookie\": \"sails.sid=s%3A5xSPUWYL9dBQ2vDPzrHJgPTl4ULeKY6x.vDQ%2F42S8EmWnOswcfTV8dh0lr0Be6Z9mxokjmKw1uF4; Path=/; HttpOnly\"\n      },\n      \"cookies\": {\n          \"sails.sid\": \"s%3A5xSPUWYL9dBQ2vDPzrHJgPTl4ULeKY6x.vDQ%2F42S8EmWnOswcfTV8dh0lr0Be6Z9mxokjmKw1uF4\"\n      },\n      \"elapsed\": \"0:00:00.930238\",\n      \"text\": \"{\\n  \\\"args\\\": {\\n    \\\"foo1\\\": \\\"foo1\\\",\\n    \\\"foo2\\\": \\\"foo2\\\"\\n  },\\n  \\\"headers\\\": {\\n    \\\"host\\\": \\\"postman-echo.com\\\",\\n    \\\"x-forwarded-proto\\\": \\\"http\\\",\\n    \\\"x-request-start\\\": \\\"t=1718029911.264\\\",\\n    \\\"connection\\\": \\\"close\\\",\\n    \\\"content-length\\\": \\\"4\\\",\\n    \\\"x-forwarded-port\\\": \\\"443\\\",\\n    \\\"x-amzn-trace-id\\\": \\\"Root=1-66670e57-0df8c3b639c5022119b8e6b4\\\",\\n    \\\"user-agent\\\": \\\"python-requests/2.31.0\\\",\\n    \\\"accept-encoding\\\": \\\"gzip, deflate, br, zstd\\\",\\n    \\\"accept\\\": \\\"*/*\\\"\\n  },\\n  \\\"url\\\": \\\"http://postman-echo.com/get?foo1=foo1&foo2=foo2\\\"\\n}\",\n      \"json\": {\n          \"args\": {\n              \"foo1\": \"foo1\",\n              \"foo2\": \"foo2\"\n          },\n          \"headers\": {\n              \"host\": \"postman-echo.com\",\n              \"x-forwarded-proto\": \"http\",\n              \"x-request-start\": \"t=1718029911.264\",\n              \"connection\": \"close\",\n              \"content-length\": \"4\",\n              \"x-forwarded-port\": \"443\",\n              \"x-amzn-trace-id\": \"Root=1-66670e57-0df8c3b639c5022119b8e6b4\",\n              \"user-agent\": \"python-requests/2.31.0\",\n              \"accept-encoding\": \"gzip, deflate, br, zstd\",\n              \"accept\": \"*/*\"\n          },\n          \"url\": \"http://postman-echo.com/get?foo1=foo1&foo2=foo2\"\n      }\n  }},\n {'request': {\n      \"method\": \"GET\",\n      \"url\": \"https://reqres.in/api/users/2\",\n      \"headers\": \"None\",\n      \"params\": \"None\",\n      \"body\": \"None\",\n      \"kwargs\": \"None\"\n  },\n  'response': {\n      \"url\": \"https://reqres.in/api/users/2\",\n      \"status\": 200,\n      \"headers\": {\n          \"Date\": \"Mon, 10 Jun 2024 14:31:51 GMT\",\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          \"Transfer-Encoding\": \"chunked\",\n          \"Connection\": \"keep-alive\",\n          \"Report-To\": \"{\\\"group\\\":\\\"heroku-nel\\\",\\\"max_age\\\":3600,\\\"endpoints\\\":[{\\\"url\\\":\\\"https://nel.heroku.com/reports?ts=1717982629&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=lXZMDeKE85MA1YyOKCZa1pmXURer%2FzktaUHsw9%2FB3ps%3D\\\"}]}\",\n          \"Reporting-Endpoints\": \"heroku-nel=https://nel.heroku.com/reports?ts=1717982629&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=lXZMDeKE85MA1YyOKCZa1pmXURer%2FzktaUHsw9%2FB3ps%3D\",\n          \"Nel\": \"{\\\"report_to\\\":\\\"heroku-nel\\\",\\\"max_age\\\":3600,\\\"success_fraction\\\":0.005,\\\"failure_fraction\\\":0.05,\\\"response_headers\\\":[\\\"Via\\\"]}\",\n          \"X-Powered-By\": \"Express\",\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Etag\": \"W/\\\"118-pbdwwFo9SKNhD3Lx5iHJyngpq00\\\"\",\n          \"Via\": \"1.1 vegur\",\n          \"Cache-Control\": \"max-age=14400\",\n          \"CF-Cache-Status\": \"HIT\",\n          \"Age\": \"3711\",\n          \"Vary\": \"Accept-Encoding\",\n          \"Server\": \"cloudflare\",\n          \"CF-RAY\": \"891a1142d90385ba-BOM\",\n          \"Content-Encoding\": \"br\"\n      },\n      \"cookies\": {},\n      \"elapsed\": \"0:00:00.119574\",\n      \"text\": \"{\\\"data\\\":{\\\"id\\\":2,\\\"email\\\":\\\"janet.weaver@reqres.in\\\",\\\"first_name\\\":\\\"Janet\\\",\\\"last_name\\\":\\\"Weaver\\\",\\\"avatar\\\":\\\"https://reqres.in/img/faces/2-image.jpg\\\"},\\\"support\\\":{\\\"url\\\":\\\"https://reqres.in/#support-heading\\\",\\\"text\\\":\\\"To keep ReqRes free, contributions towards server costs are appreciated!\\\"}}\",\n      \"json\": {\n          \"data\": {\n              \"id\": 2,\n              \"email\": \"janet.weaver@reqres.in\",\n              \"first_name\": \"Janet\",\n              \"last_name\": \"Weaver\",\n              \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\n          },\n          \"support\": {\n              \"url\": \"https://reqres.in/#support-heading\",\n              \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n          }\n      }\n  }}]",
    "crumbs": [
      "ReqRespBunch"
    ]
  }
]