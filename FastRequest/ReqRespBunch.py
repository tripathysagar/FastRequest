# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/ReqRespBunch.ipynb.

# %% auto 0
__all__ = ['ReqRespBunch']

# %% ../nbs/ReqRespBunch.ipynb 2
from .RestReqFactory import *
from fastcore.basics import patch
import requests
import json

# %% ../nbs/ReqRespBunch.ipynb 3
from typing import List
class ReqRespBunch:
    """
    given reqs_lis of type `RestReqFactory`, itcreates response and kwargs for each element of list  
    provides factorey method for getter as well as setter forthe respnse and kwargs set for each request
    """
    def __init__(self, 
                 reqs_lis:List['FastRequest.RestReqFactory.RestReqFactory']=None # list of RestReqFactory 
                ):
        """
        Initializes a ReqRespBunch object.

        Args:
            reqs_lis (list): List of requests to be stored in the object.

        Returns:
            None
        """
        self._reqs = reqs_lis
        self._resps = [None] * len(reqs_lis)
        self._kwargs = [{} for _ in range(len(reqs_lis))]

    @property
    def reqs(self):
        """
        Returns the list of requests stored in the object.

        Returns:
            list: List of requests.
        """
        return self._reqs

    @property
    def resps(self):
        """
        Returns the list of responses stored in the object.

        Returns:
            list: List of responses.
        """
        return self._resps

    @property
    def kwargs(self):
        """
        Returns the list of kwargs (arguments) associated with each request.

        Returns:
            list: List of dictionaries containing kwargs for each request.
        """
        return self._kwargs

    def set_resp(self, idx, val):
        """
        Sets the response at the specified index in the response list.

        Args:
            idx (int): Index at which to set the response.
            val: Value to set as the response.

        Returns:
            None
        """
        self._resps[idx] = val

    def set_kwargs(self, idx, val):
        """
        Sets the kwargs (arguments) for the request at the specified index.

        Args:
            idx (int): Index of the request.
            val (tuple): Tuple containing key-value pair to set as kwargs.

        Returns:
            None
        """
        self._kwargs[idx][val[0]] = val[1]

    def __len__(self):
        return len(self.reqs)
        
    def __iter__(self):
        self._idx = 0
        return self

    def __next__(self):
        if self._idx <  len(self.kwargs):
            result = (self._reqs[self._idx], self._resps[self._idx])
            self._idx += 1
            return result
        else:
            raise StopIteration

    @property
    def print_req_resp(self):
        " returns the request and response in nice formatted way"
        data = []
        for req, res in self:
            req_str = req()
            res_str = res
    
    
            data.append({
                'request': req_str,
                'response': res_str})
    
    
        return data

# %% ../nbs/ReqRespBunch.ipynb 7
@patch
def __repr__(self:requests.models.Response):
    " monkey patch the __repr__ of the repsone object"
    response_info = {
            'url': self.url,
            'status': self.status_code,
            'headers': dict(self.headers),
            'cookies': self.cookies.get_dict(),
            'elapsed': str(self.elapsed),
            'text': self.text[:1000]  # Limit to first 1000 characters
        }

    # If the response contains JSON, include it in the output
    try:
        response_info['json'] = self.json()
    except json.JSONDecodeError:
        response_info['json'] = 'No JSON data'

    return json.dumps(response_info, indent=4)

@patch
def __str__(self:requests.models.Response):
    " monkey patch the __str__ of the repsone object"
    
    return self.__repr__()
