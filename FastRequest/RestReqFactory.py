# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/RestReqFactory.ipynb.

# %% auto 0
__all__ = ['ENV', 'allowed_methods', 'get_env', 'set_env', 'RestReq', 'RestReqFactory']

# %% ../nbs/RestReqFactory.ipynb 2
from dataclasses import dataclass
from typing import Union, Optional, Dict
from collections import defaultdict
import requests
import json

# %% ../nbs/RestReqFactory.ipynb 4
ENV = defaultdict(lambda: None)
def get_env(
    x:str # key to filter  
): 
    return ENV[x] if ENV[x] else ''

# %% ../nbs/RestReqFactory.ipynb 6
def set_env(
    key:str,  # key to map variable  
    val:str   # value of the key
): 
    ENV[key] = val

# %% ../nbs/RestReqFactory.ipynb 9
allowed_methods = ["GET","POST","PUT", "DELETE"]

@dataclass
class RestReq:
    "Rest request building method"
    method: str                           # represents the request method
    url: str                              # URL 
    headers: Union[dict,None] = None      # headers
    params: Union[dict,None]= None        # parameters
    body: Union[dict, None] = None        # body
    kwargs: Union[dict, None] = None      # addtional args of `requests.request`
    
    @property
    def curl(self):
        "returing the curl repr of the rest request"
        params_str = "?"+"&".join([f"{key}={value}" for key, value in self.params.items()]) if self.params else ''
            
        curl_cmnd = f"curl -X {self.method.upper()} '{self.url}{params_str}'"

        if self.headers:
            for key, value in self.headers.items():
                curl_cmnd += f" -H '{key}: {value}'"
        
        if self.body :
            curl_cmnd += f" -d '{json.dumps(self.body)}'"
            
        return curl_cmnd

    def __call__(self, **kwargs):
        "invoke rest request"
        response = None
        try:
            if self.method.upper() in allowed_methods:
                response = requests.request(self.method, self.url, headers=self.headers, params=self.params, data=json.dumps(self.body), **kwargs)
            else:
                raise "not a valid method"
        
        except Exception as e:
            print(f"Error occurred while making the HTTP request: {e}")
        
        finally:
            return response

    def parse_kwargs(self):
        """
        process kwars set during the request, 
        for now it is converting cookies to dictionary/json parsable
        """
        if self.kwargs:
            for k,v in self.kwargs.items():
                if k == 'cookies' and isinstance(self.kwargs[k], requests.cookies.RequestsCookieJar ):
                    cookies = self.kwargs[k]
                    arr = []
                    for c in cookies:
                        arr.append({
                            'name': c.name,
                            'value': c.value,
                            'domain': c.domain,
                            'path': c.path
                        })
                    
                    self.kwargs[k] = arr

    def __str__(self):
        """
        print the request details as a JSON object.

        Returns:
            str: A JSON string representation of the request details.
        """
        self.parse_kwargs()
        req_details = {
            'method': self.method,
            'url': self.url,
            'headers': self.headers if self.headers else 'None',
            'params': self.params if self.params else 'None',
            'body': self.body if self.body else 'None',
            'kwargs': self.kwargs if self.kwargs else 'None'
        }
        
        return json.dumps(req_details, indent=4)

    __repr__ = __str__

# %% ../nbs/RestReqFactory.ipynb 16
class RestReqFactory:
    "Class to bind the lambda function to create RestReq object"
    def __init__(self, method:str,             # represents the request method
                 url_provider:lambda:None,     # function returning url 
                 headers_provider=lambda:None, # function returning headers 
                 params_provider=lambda:None,  # function returning params 
                 body_provider=lambda:None     # function returning params 
                ):
        self.method = method                      
        self.url_provider = url_provider
        self.headers_provider = headers_provider
        self.params_provider = params_provider
        self.body_provider = body_provider
        self.kwargs = None
    
    def __call__(self):
        return RestReq(
            method=self.method,
            url=self.url_provider(),
            headers=self.headers_provider(),
            params=self.params_provider(),
            body=self.body_provider(),
            kwargs=self.kwargs 
        )
        
    def set_req_kwargs(self, kwargs):
        " set `RestReq` object with the `kwargs`"
        self.kwargs = kwargs
