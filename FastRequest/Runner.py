# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/Runner.ipynb.

# %% auto 0
__all__ = ['listify', 'Callback', 'Runner', 'CookieCallback', 'ResponseStoreCallback']

# %% ../nbs/Runner.ipynb 2
from .ReqRespBunch import *
from .RestReqFactory import *

# %% ../nbs/Runner.ipynb 3
def listify(o):
    if o is None: return []
    if isinstance(o, list): return o
    if isinstance(o, str): return [o]
    if isinstance(o, Iterable): return list(o)
    return [o]

# %% ../nbs/Runner.ipynb 5
import re
class Callback():
    _order=0
    
    def set_order(
        self,
        order:int=1 # new value of order defults to 1
    ):
        """
            set order checks if `order` > 1, sets prioriy of the callback
            use `self._order`, for setting up the running of callback 
        """
        if order  <  1:
            raise Exception("Order is lt 1")
            
        self._order = order
        
    def set_runner(self, run): self.run=run
        
    def __getattr__(self, k): return getattr(self.run, k)
    
    @property
    def name(self):
        name = re.sub(r'Callback$', '', self.__class__.__name__)
        return name
    
    def __call__(self, cb_name):
        f = getattr(self, cb_name, None)
        if f and f(): return True
        return False

# %% ../nbs/Runner.ipynb 7
from tqdm.notebook import tqdm
from time import time 


class Runner():
    def __init__(self, cb_funcs=None):
        base_cb = [CookieCallback, ResponseStoreCallback]
        if not cb_funcs:
            cb_funcs = base_cb
        else:
            cb_funcs = base_cb + cb_funcs
        cbs = []
        for cfs in listify(cb_funcs):

            cb = cfs()
            setattr(self, cb.name, cb)
            cbs.append(cb)
        self.cbs = cbs
    
    @property
    def reqs_bunch(self):  return self.bunchs.reqs

    @property
    def resps_bunch(self):  return self.bunchs.resps

    @property
    def kwargs_bunch(self):  return self.bunchs.kwargs

    def set_kwargs(self, idx, val):
        self.bunchs.set_kwargs(idx, val)

    def set_resp(self, idx, val):
        self.bunchs.set_resp(idx, val)
    
    def send_one_req(
        self,
        req:RestReq,       # invoke rest request 
        debug:bool=False,  # debug  
        **kwargs
    ):
        "invoke request of `req` with kwargs containing cookies and redirect"
        if debug:
                print(f"{'====='*7} epoch={self.epoch+1} {'====='*7}")
                print(f"request:\n{'-'*len('request:')}\n{req()}")
                print(f"kwargs:\n{'-'*len('kwargs:')}\n{kwargs}")
                
        
        time_ = time()
        self.resp = req()(**kwargs)
        
        
        if debug:
            print(f"execution time: {(time()-time_)*10**3:.2f}ms" )
            print(f"response:\n{'-'*len('response:')}\n{self.resp}")
        
    def run(
        self, 
        bunchs:ReqRespBunch,  # itrate over all the request object and send response
        debug:bool=False     # debug each itration
    ):
        "run method to  iter over all the ReqRespBunch's reqs and populate the resp as well as kwargs"
        self.bunchs, self.epoch  = bunchs,0

        for cb in self.cbs: cb.set_runner(self)

        self('before_run')
        
        for i  in  tqdm(range(len(self.bunchs))):
            
            self.req = self.reqs_bunch[i]
            self.epoch = i
            
            self('before_request') 
            
            kwargs = self.kwargs_bunch[i] 
            
            self.reqs_bunch[i].set_req_kwargs(kwargs) 
            
            
            self.send_one_req(self.req, debug, **kwargs)
            
                
            self('after_request') 
        
        self('after_run')

    def __call__(self, cb_name):
        res = False
        for cb in sorted(self.cbs, key=lambda x: x._order): res = cb(cb_name) or res
        return res

# %% ../nbs/Runner.ipynb 9
class CookieCallback(Callback):
    def before_request(self):
        
        if self.epoch != 0:
            self.set_kwargs(self.epoch, ('cookies', self.resps_bunch[self.epoch - 1].cookies))
        
    def after_request(self):
        ...
class ResponseStoreCallback(Callback):
    def after_request(self):
        self.set_resp(self.epoch, self.resp)
